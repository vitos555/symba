#include<iostream>
#include<vector>

#include "symba.hpp"
#include "fields.hpp"

using namespace symba;
using namespace symba::util;
using namespace symba::polynomial;
using namespace symba::function;

int main() {
    EvaluationMap<fields::LongIntField> em = EvaluationMap<fields::LongIntField>({ {"x", 1}, {"y", 2} });
    Constant<fields::LongIntField> c = Constant<fields::LongIntField>(2);
    cout << "Constant to_string: " << c.to_string() << endl;
    cout << "Constant evaluation: " << c.evaluate() << endl;
    Variable<fields::LongIntField> x = Variable<fields::LongIntField>("x");
    cout << "Variable to_string: " << x.to_string() << endl;
    cout << "Variable name: " << x.get_name() << endl;
    cout << "Variable evaluation: " << x.evaluate(em) << endl;
    Variable<fields::LongIntField> y = Variable<fields::LongIntField>("y");
    cout << "Variable to_string: " << y.to_string() << endl;
    cout << "Variable name: " << y.get_name() << endl;
    cout << "Variable evaluation: " << y.evaluate(em) << endl;
    Entity<fields::LongIntField> ec = Entity<fields::LongIntField>(c);
    cout << "Entity to_string: " << ec.to_string() << endl;
    cout << "Entity evaluation: " << ec.evaluate(em) << endl;
    Entity<fields::LongIntField> ex = Entity<fields::LongIntField>(x);
    cout << "Entity to_string: " << ex.to_string() << endl;
    cout << "Entity evaluation: " << ex.evaluate(em) << endl;
    Term<fields::LongIntField> t1 = Term<fields::LongIntField>(x, 2);
    cout << "Entity to_string: " << t1.to_string() << endl;
    cout << "Entity evaluation: " << t1.evaluate(em) << endl;
    Term<fields::LongIntField> t2 = Term<fields::LongIntField>(c, 5);
    cout << "Entity to_string: " << t2.to_string() << endl;
    cout << "Entity evaluation: " << t2.evaluate(em) << endl;
    t2.simplify();
    cout << "Entity to_string: " << t2.to_string() << endl;
    cout << "Entity evaluation: " << t2.evaluate(em) << endl;
    Term<fields::LongIntField> t3 = Term<fields::LongIntField>(y, 1);
    cout << "Entity to_string: " << t3.to_string() << endl;
    cout << "Entity evaluation: " << t3.evaluate(em) << endl;
    Term<fields::LongIntField> t4 = Term<fields::LongIntField>(c, 2);
    cout << "Entity to_string: " << t4.to_string() << endl;
    cout << "Entity evaluation: " << t4.evaluate(em) << endl;
    Monomial<fields::LongIntField> m1 = Monomial<fields::LongIntField>({t1, t2, t1, t3, t3, t4});
    cout << "Monomial to_string: " << m1.to_string() << endl;
    cout << "Monomial evaluation: " << m1.evaluate(em) << endl;
    m1.simplify();
    cout << "Monomial to_string: " << m1.to_string() << endl;
    cout << "Monomial evaluation: " << m1.evaluate(em) << endl;
    Polynomial<fields::LongIntField> p1 = Polynomial<fields::LongIntField>({m1, m1});
    cout << "Polynomial to_string: " << p1.to_string() << endl;
    cout << "Polynomial evaluation: " << p1.evaluate(em) << endl;
    p1.simplify();
    cout << "Polynomial to_string: " << p1.to_string() << endl;
    cout << "Polynomial evaluation: " << p1.evaluate(em) << endl;
    Monomial<fields::LongIntField> m2 = Monomial<fields::LongIntField>({t1, t3, t3, t4});
    m2.simplify();
    cout << "Monomial to_string: " << m2.to_string() << endl;
    cout << "Monomial evaluation: " << m2.evaluate(em) << endl;
    Polynomial<fields::LongIntField> p2 = Polynomial<fields::LongIntField>({m1, m1, m2});
    p2.simplify();
    cout << "Polynomial to_string: " << p2.to_string() << endl;
    cout << "Polynomial evaluation: " << p2.evaluate(em) << endl;
    Term<fields::LongIntField> t5 = Term<fields::LongIntField>(p2, 2);
    Monomial<fields::LongIntField> m3 = Monomial<fields::LongIntField>({t1, t3, t5, t5});
    Term<fields::LongIntField> tm = Term<fields::LongIntField>(m1, 2);
    Monomial<fields::LongIntField> m4 = Monomial<fields::LongIntField>({c, x, y, tm, tm, t4});
    cout << "Monomial to_string: " << m4.to_string() << endl;
    cout << "Monomial evaluation: " << m4.evaluate(em) << endl;
    m4.simplify();
    cout << "Monomial to_string: " << m4.to_string() << endl;
    cout << "Monomial evaluation: " << m4.evaluate(em) << endl;
    Polynomial<fields::LongIntField> p3 = Polynomial<fields::LongIntField>({m1, m1, m2, m3});
    cout << "Polynomial to_string: " << p3.to_string() << endl;
    cout << "Polynomial evaluation: " << p3.evaluate(em) << endl;
    p3.simplify();
    cout << "Polynomial to_string: " << p3.to_string() << endl;
    cout << "Polynomial evaluation: " << p3.evaluate(em) << endl;
    p3.expand();
    cout << "Polynomial to_string: " << p3.to_string() << endl;
    cout << "Polynomial evaluation: " << p3.evaluate(em) << endl;
    p3.factor_coefficients();
    cout << "Polynomial to_string: " << p3.to_string() << endl;
    cout << "Polynomial evaluation: " << p3.evaluate(em) << endl;
    p3.factor();
    cout << "Polynomial to_string: " << p3.to_string() << endl;
    cout << "Polynomial evaluation: " << p3.evaluate(em) << endl;
    p3.expand();
    cout << "Polynomial to_string: " << p3.to_string() << endl;
    cout << "Polynomial evaluation: " << p3.evaluate(em) << endl;
    p3.factor();
    cout << "Polynomial to_string: " << p3.to_string() << endl;
    cout << "Polynomial evaluation: " << p3.evaluate(em) << endl;


    // Substitution tests
    Polynomial<fields::LongIntField> p11 = Polynomial<fields::LongIntField>(p1);
    SubstitutionMap<fields::LongIntField> sem1 = SubstitutionMap<fields::LongIntField>({ {"x", c} });
    cout << "Polynomial11 before substitution1: " << p11.to_string() << endl;
    p11.substitute(sem1);
    cout << "Polynomial11 after substitution1: " << p11.to_string() << endl;
    p11.simplify();
    cout << "Polynomial11 after substitution1(simplified): " << p11.to_string() << endl;
    Polynomial<fields::LongIntField> p12 = Polynomial<fields::LongIntField>(p1);
    SubstitutionMap<fields::LongIntField> sem2 = SubstitutionMap<fields::LongIntField>({ {"y", c} });
    cout << "Polynomial12 before substitution2: " << p12.to_string() << endl;
    p12.substitute(sem2);
    cout << "Polynomial12 after substitution2: " << p12.to_string() << endl;
    p12.simplify();
    cout << "Polynomial12 after substitution2(simplified): " << p12.to_string() << endl;
    Polynomial<fields::LongIntField> p21 = Polynomial<fields::LongIntField>(p2);
    cout << "Polynomial21 before substitution1: " << p21.to_string() << endl;
    p21.substitute(sem1);
    cout << "Polynomial21 after substitution1: " << p21.to_string() << endl;
    p21.simplify();
    cout << "Polynomial21 after substitution1(simplified): " << p21.to_string() << endl;
    Polynomial<fields::LongIntField> p22 = Polynomial<fields::LongIntField>(p2);
    cout << "Polynomial22 before substitution2: " << p22.to_string() << endl;
    p22.substitute(sem2);
    cout << "Polynomial22 after substitution2: " << p22.to_string() << endl;
    p22.simplify();
    cout << "Polynomial22 after substitution2(simplified): " << p22.to_string() << endl;
    Polynomial<fields::LongIntField> p33 = Polynomial<fields::LongIntField>(p2);
    SubstitutionMap<fields::LongIntField> sem3 = SubstitutionMap<fields::LongIntField>({ {"x", p1} });
    cout << "Polynomial33 before substitution2: " << p33.to_string() << endl;
    p33.substitute(sem3);
    cout << "Polynomial33 after substitution2: " << p33.to_string() << endl;
    p33.simplify();
    cout << "Polynomial33 after substitution2(simplified): " << p33.to_string() << endl;
    Polynomial<fields::LongIntField> p44 = Polynomial<fields::LongIntField>(p2);
    SubstitutionMap<fields::LongIntField> sem4 = SubstitutionMap<fields::LongIntField>({ {"x", p2} });
    cout << "Polynomial44 before substitution2: " << p44.to_string() << endl;
    p44.substitute(sem4);
    cout << "Polynomial44 after substitution2: " << p44.to_string() << endl;
    p44.simplify();
    cout << "Polynomial44 after substitution2(simplified): " << p44.to_string() << endl;
    p44.expand();
    cout << "Polynomial44 after substitution2(expanded): " << p44.to_string() << endl;

    // Function tests
    Function<fields::LongIntField> f1 = exp<fields::LongIntField>(ec);
    cout << "Function to_string: " << f1.to_string() << endl;
    cout << "Function evaluation: " << f1.evaluate(em) << endl;
    Function<fields::LongIntField> f2 = log<fields::LongIntField>(Entity<fields::LongIntField>(p1));
    cout << "Function to_string: " << f2.to_string() << endl;
    cout << "Function evaluation: " << f2.evaluate(em) << endl;
    Function<fields::LongIntField> f3 = log<fields::LongIntField>(Entity<fields::LongIntField>(p2));
    cout << "Function to_string: " << f3.to_string() << endl;
    cout << "Function evaluation: " << f3.evaluate(em) << endl;
    Function<fields::LongIntField> f4 = exp<fields::LongIntField>(Entity<fields::LongIntField>(f3));
    cout << "Function to_string: " << f4.to_string() << endl;
    cout << "Function evaluation: " << f4.evaluate(em) << endl;
    f4.simplify();
    cout << "Function to_string: " << f4.to_string() << endl;
    cout << "Function evaluation: " << f4.evaluate(em) << endl;
    Entity<fields::LongIntField> ef1 = Entity<fields::LongIntField>(f1);
    ef1.add(f2);
    cout << "Function to_string: " << ef1.to_string() << endl;
    cout << "Function evaluation: " << ef1.evaluate(em) << endl;
    return 0;
}